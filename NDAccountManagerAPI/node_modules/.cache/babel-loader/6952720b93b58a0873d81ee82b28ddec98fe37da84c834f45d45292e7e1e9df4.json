{"ast":null,"code":"/*! @azure/msal-browser v3.18.0 2024-07-01 */\n'use strict';\n\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '@azure/msal-common';\nimport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER } from '../cache/BrowserCacheManager.mjs';\nimport { CryptoOps } from '../crypto/CryptoOps.mjs';\nimport { blockAPICallsBeforeInitialize, blockNonBrowserEnvironment } from '../utils/BrowserUtils.mjs';\nimport { EventHandler } from '../event/EventHandler.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * UnknownOperatingContextController class\n *\n * - Until initialize method is called, this controller is the default\n * - AFter initialize method is called, this controller will be swapped out for the appropriate controller\n * if the operating context can be determined; otherwise this controller will continued be used\n *\n * - Why do we have this?  We don't want to dynamically import (download) all of the code in StandardController if we don't need to.\n *\n * - Only includes implementation for getAccounts and handleRedirectPromise\n *   - All other methods are will throw initialization error (because either initialize method or the factory method were not used)\n *   - This controller is necessary for React Native wrapper, server side rendering and any other scenario where we don't have a DOM\n *\n */\nclass UnknownOperatingContextController {\n  constructor(operatingContext) {\n    // Flag representing whether or not the initialize API has been called and completed\n    this.initialized = false;\n    this.operatingContext = operatingContext;\n    this.isBrowserEnvironment = this.operatingContext.isBrowserEnvironment();\n    this.config = operatingContext.getConfig();\n    this.logger = operatingContext.getLogger();\n    // Initialize performance client\n    this.performanceClient = this.config.telemetry.client;\n    // Initialize the crypto class.\n    this.browserCrypto = this.isBrowserEnvironment ? new CryptoOps(this.logger, this.performanceClient) : DEFAULT_CRYPTO_IMPLEMENTATION;\n    // Initialize the browser storage class.\n    this.browserStorage = this.isBrowserEnvironment ? new BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger, undefined, this.performanceClient) : DEFAULT_BROWSER_CACHE_MANAGER(this.config.auth.clientId, this.logger);\n    this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n  }\n  getBrowserStorage() {\n    return this.browserStorage;\n  }\n  getEventHandler() {\n    return this.eventHandler;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAccount(accountFilter) {\n    return null;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAccountByHomeId(homeAccountId) {\n    return null;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAccountByLocalId(localAccountId) {\n    return null;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAccountByUsername(username) {\n    return null;\n  }\n  getAllAccounts() {\n    return [];\n  }\n  initialize() {\n    this.initialized = true;\n    return Promise.resolve();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  acquireTokenPopup(request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  acquireTokenRedirect(request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return Promise.resolve();\n  }\n  acquireTokenSilent(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  silentRequest) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  acquireTokenByCode(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  acquireTokenNative(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  apiId,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  accountId) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  acquireTokenByRefreshToken(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  commonRequest,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  silentRequest) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  addEventCallback(callback) {\n    return this.eventHandler.addEventCallback(callback);\n  }\n  removeEventCallback(callbackId) {\n    this.eventHandler.removeEventCallback(callbackId);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addPerformanceCallback(callback) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return \"\";\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  removePerformanceCallback(callbackId) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return true;\n  }\n  enableAccountStorageEvents() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n  }\n  disableAccountStorageEvents() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n  }\n  handleRedirectPromise(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  hash) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    return Promise.resolve(null);\n  }\n  loginPopup(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  loginRedirect(request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  logout(logoutRequest) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  logoutRedirect(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  logoutRequest) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  logoutPopup(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  logoutRequest) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  ssoSilent(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  getTokenCache() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  getLogger() {\n    return this.logger;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setLogger(logger) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setActiveAccount(account) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n  }\n  getActiveAccount() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return null;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  initializeWrapperLibrary(sku, version) {\n    this.browserStorage.setWrapperMetadata(sku, version);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setNavigationClient(navigationClient) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n  }\n  getConfiguration() {\n    return this.config;\n  }\n  isBrowserEnv() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return true;\n  }\n  getBrowserCrypto() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  getPerformanceClient() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  getRedirectResponse() {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n    return {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async clearCache(logoutRequest) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async hydrateCache(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  result,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    blockAPICallsBeforeInitialize(this.initialized);\n    blockNonBrowserEnvironment();\n  }\n}\nexport { UnknownOperatingContextController };","map":{"version":3,"names":["UnknownOperatingContextController","constructor","operatingContext","initialized","isBrowserEnvironment","config","getConfig","logger","getLogger","performanceClient","telemetry","client","browserCrypto","CryptoOps","DEFAULT_CRYPTO_IMPLEMENTATION","browserStorage","BrowserCacheManager","auth","clientId","cache","undefined","DEFAULT_BROWSER_CACHE_MANAGER","eventHandler","EventHandler","getBrowserStorage","getEventHandler","getAccount","accountFilter","getAccountByHomeId","homeAccountId","getAccountByLocalId","localAccountId","getAccountByUsername","username","getAllAccounts","initialize","Promise","resolve","acquireTokenPopup","request","blockAPICallsBeforeInitialize","blockNonBrowserEnvironment","acquireTokenRedirect","acquireTokenSilent","silentRequest","acquireTokenByCode","acquireTokenNative","apiId","accountId","acquireTokenByRefreshToken","commonRequest","addEventCallback","callback","removeEventCallback","callbackId","addPerformanceCallback","removePerformanceCallback","enableAccountStorageEvents","disableAccountStorageEvents","handleRedirectPromise","hash","loginPopup","loginRedirect","logout","logoutRequest","logoutRedirect","logoutPopup","ssoSilent","getTokenCache","setLogger","setActiveAccount","account","getActiveAccount","initializeWrapperLibrary","sku","version","setWrapperMetadata","setNavigationClient","navigationClient","getConfiguration","isBrowserEnv","getBrowserCrypto","getPerformanceClient","getRedirectResponse","clearCache","hydrateCache","result"],"sources":["C:\\Users\\90542\\ndaccountmanager\\node_modules\\@azure\\msal-browser\\src\\controllers\\UnknownOperatingContextController.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationUrlRequest,\n    CommonSilentFlowRequest,\n    PerformanceCallbackFunction,\n    AccountInfo,\n    Logger,\n    ICrypto,\n    IPerformanceClient,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    AccountFilter,\n} from \"@azure/msal-common\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport {\n    BrowserCacheManager,\n    DEFAULT_BROWSER_CACHE_MANAGER,\n} from \"../cache/BrowserCacheManager\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ApiId, WrapperSKU } from \"../utils/BrowserConstants\";\nimport { IController } from \"./IController\";\nimport { UnknownOperatingContext } from \"../operatingcontext/UnknownOperatingContext\";\nimport { CryptoOps } from \"../crypto/CryptoOps\";\nimport {\n    blockAPICallsBeforeInitialize,\n    blockNonBrowserEnvironment,\n} from \"../utils/BrowserUtils\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EventCallbackFunction } from \"../event/EventMessage\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\n\n/**\n * UnknownOperatingContextController class\n *\n * - Until initialize method is called, this controller is the default\n * - AFter initialize method is called, this controller will be swapped out for the appropriate controller\n * if the operating context can be determined; otherwise this controller will continued be used\n *\n * - Why do we have this?  We don't want to dynamically import (download) all of the code in StandardController if we don't need to.\n *\n * - Only includes implementation for getAccounts and handleRedirectPromise\n *   - All other methods are will throw initialization error (because either initialize method or the factory method were not used)\n *   - This controller is necessary for React Native wrapper, server side rendering and any other scenario where we don't have a DOM\n *\n */\nexport class UnknownOperatingContextController implements IController {\n    // OperatingContext\n    protected readonly operatingContext: UnknownOperatingContext;\n\n    // Logger\n    protected logger: Logger;\n\n    // Storage interface implementation\n    protected readonly browserStorage: BrowserCacheManager;\n\n    // Input configuration by developer/user\n    protected readonly config: BrowserConfiguration;\n\n    // Performance telemetry client\n    protected readonly performanceClient: IPerformanceClient;\n\n    // Crypto interface implementation\n    protected readonly browserCrypto: ICrypto;\n\n    // Flag to indicate if in browser environment\n    protected isBrowserEnvironment: boolean;\n\n    // Flag representing whether or not the initialize API has been called and completed\n    protected initialized: boolean = false;\n\n    protected readonly eventHandler: EventHandler;\n\n    constructor(operatingContext: UnknownOperatingContext) {\n        this.operatingContext = operatingContext;\n\n        this.isBrowserEnvironment =\n            this.operatingContext.isBrowserEnvironment();\n\n        this.config = operatingContext.getConfig();\n\n        this.logger = operatingContext.getLogger();\n\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n\n        // Initialize the crypto class.\n        this.browserCrypto = this.isBrowserEnvironment\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n\n        // Initialize the browser storage class.\n        this.browserStorage = this.isBrowserEnvironment\n            ? new BrowserCacheManager(\n                  this.config.auth.clientId,\n                  this.config.cache,\n                  this.browserCrypto,\n                  this.logger,\n                  undefined,\n                  this.performanceClient\n              )\n            : DEFAULT_BROWSER_CACHE_MANAGER(\n                  this.config.auth.clientId,\n                  this.logger\n              );\n\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n    }\n    getBrowserStorage(): BrowserCacheManager {\n        return this.browserStorage;\n    }\n\n    getEventHandler(): EventHandler {\n        return this.eventHandler;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccountByLocalId(localAccountId: string): AccountInfo | null {\n        return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccountByUsername(username: string): AccountInfo | null {\n        return null;\n    }\n    getAllAccounts(): AccountInfo[] {\n        return [];\n    }\n    initialize(): Promise<void> {\n        this.initialized = true;\n        return Promise.resolve();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return Promise.resolve();\n    }\n    acquireTokenSilent(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    acquireTokenByCode(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    acquireTokenNative(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request:\n            | PopupRequest\n            | SilentRequest\n            | Partial<\n                  Omit<\n                      CommonAuthorizationUrlRequest,\n                      | \"responseMode\"\n                      | \"codeChallenge\"\n                      | \"codeChallengeMethod\"\n                      | \"requestedClaimsHash\"\n                      | \"nativeBroker\"\n                  >\n              >,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        apiId: ApiId,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        accountId?: string | undefined\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    acquireTokenByRefreshToken(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        commonRequest: CommonSilentFlowRequest,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.eventHandler.addEventCallback(callback);\n    }\n    removeEventCallback(callbackId: string): void {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return \"\";\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId: string): boolean {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return true;\n    }\n    enableAccountStorageEvents(): void {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n    disableAccountStorageEvents(): void {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n\n    handleRedirectPromise(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        hash?: string | undefined\n    ): Promise<AuthenticationResult | null> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        return Promise.resolve(null);\n    }\n    loginPopup(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request?: PopupRequest | undefined\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<void>;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest?: EndSessionRequest | undefined): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<void>;\n    }\n    logoutRedirect(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        logoutRequest?: EndSessionRequest | undefined\n    ): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<void>;\n    }\n    logoutPopup(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        logoutRequest?: EndSessionPopupRequest | undefined\n    ): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<void>;\n    }\n    ssoSilent(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request: Partial<\n            Omit<\n                CommonAuthorizationUrlRequest,\n                | \"responseMode\"\n                | \"codeChallenge\"\n                | \"codeChallengeMethod\"\n                | \"requestedClaimsHash\"\n                | \"nativeBroker\"\n            >\n        >\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    getTokenCache(): ITokenCache {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as ITokenCache;\n    }\n    getLogger(): Logger {\n        return this.logger;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setLogger(logger: Logger): void {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setActiveAccount(account: AccountInfo | null): void {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n    getActiveAccount(): AccountInfo | null {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        this.browserStorage.setWrapperMetadata(sku, version);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient: INavigationClient): void {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n    getConfiguration(): BrowserConfiguration {\n        return this.config;\n    }\n    isBrowserEnv(): boolean {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return true;\n    }\n    getBrowserCrypto(): ICrypto {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as ICrypto;\n    }\n    getPerformanceClient(): IPerformanceClient {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as IPerformanceClient;\n    }\n    getRedirectResponse(): Map<string, Promise<AuthenticationResult | null>> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Map<string, Promise<AuthenticationResult | null>>;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async hydrateCache(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        result: AuthenticationResult,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}