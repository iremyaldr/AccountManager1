{"ast":null,"code":"/*! @azure/msal-browser v3.18.0 2024-07-01 */\n'use strict';\n\nimport { NestedAppOperatingContext } from '../operatingcontext/NestedAppOperatingContext.mjs';\nimport { StandardOperatingContext } from '../operatingcontext/StandardOperatingContext.mjs';\nimport { StandardController } from './StandardController.mjs';\nimport { NestedAppAuthController } from './NestedAppAuthController.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nasync function createV3Controller(config) {\n  const standard = new StandardOperatingContext(config);\n  await standard.initialize();\n  return StandardController.createController(standard);\n}\nasync function createController(config) {\n  const standard = new StandardOperatingContext(config);\n  const nestedApp = new NestedAppOperatingContext(config);\n  const operatingContexts = [standard.initialize(), nestedApp.initialize()];\n  await Promise.all(operatingContexts);\n  if (nestedApp.isAvailable() && config.auth.supportsNestedAppAuth) {\n    return NestedAppAuthController.createController(nestedApp);\n  } else if (standard.isAvailable()) {\n    return StandardController.createController(standard);\n  } else {\n    // Since neither of the actual operating contexts are available keep the UnknownOperatingContextController\n    return null;\n  }\n}\nexport { createController, createV3Controller };","map":{"version":3,"names":["createV3Controller","config","standard","StandardOperatingContext","initialize","StandardController","createController","nestedApp","NestedAppOperatingContext","operatingContexts","Promise","all","isAvailable","auth","supportsNestedAppAuth","NestedAppAuthController"],"sources":["C:\\Users\\90542\\ndaccountmanager\\node_modules\\@azure\\msal-browser\\src\\controllers\\ControllerFactory.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NestedAppOperatingContext } from \"../operatingcontext/NestedAppOperatingContext\";\nimport { StandardOperatingContext } from \"../operatingcontext/StandardOperatingContext\";\nimport { IController } from \"./IController\";\nimport { Configuration } from \"../config/Configuration\";\nimport { StandardController } from \"./StandardController\";\nimport { NestedAppAuthController } from \"./NestedAppAuthController\";\n\nexport async function createV3Controller(\n    config: Configuration\n): Promise<IController> {\n    const standard = new StandardOperatingContext(config);\n\n    await standard.initialize();\n    return StandardController.createController(standard);\n}\n\nexport async function createController(\n    config: Configuration\n): Promise<IController | null> {\n    const standard = new StandardOperatingContext(config);\n    const nestedApp = new NestedAppOperatingContext(config);\n\n    const operatingContexts = [standard.initialize(), nestedApp.initialize()];\n\n    await Promise.all(operatingContexts);\n\n    if (nestedApp.isAvailable() && config.auth.supportsNestedAppAuth) {\n        return NestedAppAuthController.createController(nestedApp);\n    } else if (standard.isAvailable()) {\n        return StandardController.createController(standard);\n    } else {\n        // Since neither of the actual operating contexts are available keep the UnknownOperatingContextController\n        return null;\n    }\n}\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AASI,eAAeA,kBAAkBA,CACpCC,MAAqB;EAErB,MAAMC,QAAQ,GAAG,IAAIC,wBAAwB,CAACF,MAAM,CAAC;EAErD,MAAMC,QAAQ,CAACE,UAAU,EAAE;EAC3B,OAAOC,kBAAkB,CAACC,gBAAgB,CAACJ,QAAQ,CAAC;AACxD;AAEO,eAAeI,gBAAgBA,CAClCL,MAAqB;EAErB,MAAMC,QAAQ,GAAG,IAAIC,wBAAwB,CAACF,MAAM,CAAC;EACrD,MAAMM,SAAS,GAAG,IAAIC,yBAAyB,CAACP,MAAM,CAAC;EAEvD,MAAMQ,iBAAiB,GAAG,CAACP,QAAQ,CAACE,UAAU,EAAE,EAAEG,SAAS,CAACH,UAAU,EAAE,CAAC;EAEzE,MAAMM,OAAO,CAACC,GAAG,CAACF,iBAAiB,CAAC;EAEpC,IAAIF,SAAS,CAACK,WAAW,EAAE,IAAIX,MAAM,CAACY,IAAI,CAACC,qBAAqB,EAAE;IAC9D,OAAOC,uBAAuB,CAACT,gBAAgB,CAACC,SAAS,CAAC;EAC7D,OAAM,IAAIL,QAAQ,CAACU,WAAW,EAAE,EAAE;IAC/B,OAAOP,kBAAkB,CAACC,gBAAgB,CAACJ,QAAQ,CAAC;EACvD,OAAM;;IAEH,OAAO,IAAI;EACd;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}