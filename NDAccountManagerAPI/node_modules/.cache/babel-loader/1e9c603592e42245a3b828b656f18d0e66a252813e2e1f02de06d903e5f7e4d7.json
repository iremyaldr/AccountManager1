{"ast":null,"code":"/*! @azure/msal-browser v3.18.0 2024-07-01 */\n'use strict';\n\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\nimport { BridgeProxy } from '../naa/BridgeProxy.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass NestedAppOperatingContext extends BaseOperatingContext {\n  constructor() {\n    super(...arguments);\n    this.bridgeProxy = undefined;\n    this.accountContext = null;\n  }\n  /**\n   * Return the module name.  Intended for use with import() to enable dynamic import\n   * of the implementation associated with this operating context\n   * @returns\n   */\n  getModuleName() {\n    return NestedAppOperatingContext.MODULE_NAME;\n  }\n  /**\n   * Returns the unique identifier for this operating context\n   * @returns string\n   */\n  getId() {\n    return NestedAppOperatingContext.ID;\n  }\n  /**\n   * Returns the current BridgeProxy\n   * @returns IBridgeProxy | undefined\n   */\n  getBridgeProxy() {\n    return this.bridgeProxy;\n  }\n  /**\n   * Checks whether the operating context is available.\n   * Confirms that the code is running a browser rather.  This is required.\n   * @returns Promise<boolean> indicating whether this operating context is currently available.\n   */\n  async initialize() {\n    /*\n     * TODO: Add implementation to check for presence of inject Nested App Auth Bridge JavaScript interface\n     *\n     */\n    try {\n      if (typeof window !== \"undefined\") {\n        const bridgeProxy = await BridgeProxy.create();\n        /*\n         * Because we want single sign on we expect the host app to provide the account context\n         * with a min set of params that can be used to identify the account\n         * this.account = nestedApp.getAccountByFilter(bridgeProxy.getAccountContext());\n         */\n        this.accountContext = bridgeProxy.getAccountContext();\n        this.bridgeProxy = bridgeProxy;\n        this.available = bridgeProxy !== undefined;\n      }\n    } catch (ex) {\n      this.logger.infoPii(`Could not initialize Nested App Auth bridge (${ex})`);\n    }\n    this.logger.info(`Nested App Auth Bridge available: ${this.available}`);\n    return this.available;\n  }\n}\n/*\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n * containing the implementation for this operating context\n */\nNestedAppOperatingContext.MODULE_NAME = \"\";\n/**\n * Unique identifier for the operating context\n */\nNestedAppOperatingContext.ID = \"NestedAppOperatingContext\";\nexport { NestedAppOperatingContext };","map":{"version":3,"names":["NestedAppOperatingContext","BaseOperatingContext","constructor","bridgeProxy","undefined","accountContext","getModuleName","MODULE_NAME","getId","ID","getBridgeProxy","initialize","window","BridgeProxy","create","getAccountContext","available","ex","logger","infoPii","info"],"sources":["C:\\Users\\90542\\ndaccountmanager\\node_modules\\@azure\\msal-browser\\src\\operatingcontext\\NestedAppOperatingContext.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\nimport { IBridgeProxy } from \"../naa/IBridgeProxy\";\nimport { BridgeProxy } from \"../naa/BridgeProxy\";\nimport { AccountContext } from \"../naa/BridgeAccountContext\";\n\nexport class NestedAppOperatingContext extends BaseOperatingContext {\n    protected bridgeProxy: IBridgeProxy | undefined = undefined;\n    protected accountContext: AccountContext | null = null;\n\n    /*\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n     * containing the implementation for this operating context\n     */\n    static readonly MODULE_NAME: string = \"\";\n\n    /**\n     * Unique identifier for the operating context\n     */\n    static readonly ID: string = \"NestedAppOperatingContext\";\n\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName(): string {\n        return NestedAppOperatingContext.MODULE_NAME;\n    }\n\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId(): string {\n        return NestedAppOperatingContext.ID;\n    }\n\n    /**\n     * Returns the current BridgeProxy\n     * @returns IBridgeProxy | undefined\n     */\n    getBridgeProxy(): IBridgeProxy | undefined {\n        return this.bridgeProxy;\n    }\n\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    async initialize(): Promise<boolean> {\n        /*\n         * TODO: Add implementation to check for presence of inject Nested App Auth Bridge JavaScript interface\n         *\n         */\n\n        try {\n            if (typeof window !== \"undefined\") {\n                const bridgeProxy: IBridgeProxy = await BridgeProxy.create();\n                /*\n                 * Because we want single sign on we expect the host app to provide the account context\n                 * with a min set of params that can be used to identify the account\n                 * this.account = nestedApp.getAccountByFilter(bridgeProxy.getAccountContext());\n                 */\n                this.accountContext = bridgeProxy.getAccountContext();\n                this.bridgeProxy = bridgeProxy;\n                this.available = bridgeProxy !== undefined;\n            }\n        } catch (ex) {\n            this.logger.infoPii(\n                `Could not initialize Nested App Auth bridge (${ex})`\n            );\n        }\n\n        this.logger.info(`Nested App Auth Bridge available: ${this.available}`);\n        return this.available;\n    }\n}\n"],"mappings":";;;;;;AAAA;;;AAGG;AAOG,MAAOA,yBAA0B,SAAQC,oBAAoB;EAAnEC,YAAA;;IACc,IAAW,CAAAC,WAAA,GAA6BC,SAAS;IACjD,IAAc,CAAAC,cAAA,GAA0B,IAAI;;EAatD;;;;AAIG;EACHC,aAAaA,CAAA;IACT,OAAON,yBAAyB,CAACO,WAAW;;EAGhD;;;AAGG;EACHC,KAAKA,CAAA;IACD,OAAOR,yBAAyB,CAACS,EAAE;;EAGvC;;;AAGG;EACHC,cAAcA,CAAA;IACV,OAAO,IAAI,CAACP,WAAW;;EAG3B;;;;AAIG;EACH,MAAMQ,UAAUA,CAAA;IACZ;;;AAGG;IAEH,IAAI;MACA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;QAC/B,MAAMT,WAAW,GAAiB,MAAMU,WAAW,CAACC,MAAM,EAAE;QAC5D;;;;AAIG;QACH,IAAI,CAACT,cAAc,GAAGF,WAAW,CAACY,iBAAiB,EAAE;QACrD,IAAI,CAACZ,WAAW,GAAGA,WAAW;QAC9B,IAAI,CAACa,SAAS,GAAGb,WAAW,KAAKC,SAAS;MAC7C;IACJ,EAAC,OAAOa,EAAE,EAAE;MACT,IAAI,CAACC,MAAM,CAACC,OAAO,CACf,gDAAgDF,EAAE,GAAG,CACxD;IACJ;IAED,IAAI,CAACC,MAAM,CAACE,IAAI,CAAC,qCAAqC,IAAI,CAACJ,SAAS,EAAE,CAAC;IACvE,OAAO,IAAI,CAACA,SAAS;;;AAlEzB;;;AAGG;AACahB,yBAAW,CAAAO,WAAA,GAAW,EAAE;AAExC;;AAEG;AACaP,yBAAE,CAAAS,EAAA,GAAW,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}