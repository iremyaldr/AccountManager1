{"ast":null,"code":"/*! @azure/msal-browser v3.18.0 2024-07-01 */\n'use strict';\n\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass UnknownOperatingContext extends BaseOperatingContext {\n  /**\n   * Returns the unique identifier for this operating context\n   * @returns string\n   */\n  getId() {\n    return UnknownOperatingContext.ID;\n  }\n  /**\n   * Return the module name.  Intended for use with import() to enable dynamic import\n   * of the implementation associated with this operating context\n   * @returns\n   */\n  getModuleName() {\n    return UnknownOperatingContext.MODULE_NAME;\n  }\n  /**\n   * Checks whether the operating context is available.\n   * Confirms that the code is running a browser rather.  This is required.\n   * @returns Promise<boolean> indicating whether this operating context is currently available.\n   */\n  async initialize() {\n    /**\n     * This operating context is in use when we have not checked for what the operating context is.\n     * The context is unknown until we check it.\n     */\n    return true;\n  }\n}\n/*\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n * containing the implementation for this operating context\n */\nUnknownOperatingContext.MODULE_NAME = \"\";\n/**\n * Unique identifier for the operating context\n */\nUnknownOperatingContext.ID = \"UnknownOperatingContext\";\nexport { UnknownOperatingContext };","map":{"version":3,"names":["UnknownOperatingContext","BaseOperatingContext","getId","ID","getModuleName","MODULE_NAME","initialize"],"sources":["C:\\Users\\90542\\ndaccountmanager\\node_modules\\@azure\\msal-browser\\src\\operatingcontext\\UnknownOperatingContext.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\n\nexport class UnknownOperatingContext extends BaseOperatingContext {\n    /*\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n     * containing the implementation for this operating context\n     */\n    static readonly MODULE_NAME: string = \"\";\n\n    /**\n     * Unique identifier for the operating context\n     */\n    static readonly ID: string = \"UnknownOperatingContext\";\n\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId(): string {\n        return UnknownOperatingContext.ID;\n    }\n\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName(): string {\n        return UnknownOperatingContext.MODULE_NAME;\n    }\n\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    async initialize(): Promise<boolean> {\n        /**\n         * This operating context is in use when we have not checked for what the operating context is.\n         * The context is unknown until we check it.\n         */\n        return true;\n    }\n}\n"],"mappings":";;;;;AAAA;;;AAGG;AAIG,MAAOA,uBAAwB,SAAQC,oBAAoB;EAY7D;;;AAGG;EACHC,KAAKA,CAAA;IACD,OAAOF,uBAAuB,CAACG,EAAE;;EAGrC;;;;AAIG;EACHC,aAAaA,CAAA;IACT,OAAOJ,uBAAuB,CAACK,WAAW;;EAG9C;;;;AAIG;EACH,MAAMC,UAAUA,CAAA;IACZ;;;AAGG;IACH,OAAO,IAAI;;;AAtCf;;;AAGG;AACaN,uBAAW,CAAAK,WAAA,GAAW,EAAE;AAExC;;AAEG;AACaL,uBAAE,CAAAG,EAAA,GAAW,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}